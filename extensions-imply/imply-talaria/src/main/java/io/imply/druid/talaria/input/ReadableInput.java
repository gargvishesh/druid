/*
 * Copyright (c) Imply Data, Inc. All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of Imply Data, Inc. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with Imply.
 */

package io.imply.druid.talaria.input;

import com.google.common.base.Preconditions;
import io.imply.druid.talaria.frame.channel.ReadableFrameChannel;
import io.imply.druid.talaria.frame.read.FrameReader;
import io.imply.druid.talaria.kernel.StagePartition;
import org.apache.druid.java.util.common.ISE;

import javax.annotation.Nullable;

/**
 * A single item of readable input. Generated by {@link InputSliceReader#attach} from an {@link InputSlice}.
 *
 * Each item is either readable as a {@link org.apache.druid.segment.Segment} or as a {@link ReadableFrameChannel},
 * but not both. Check {@link #hasSegment()} and {@link #hasChannel()} to see which one you have.
 */
public class ReadableInput
{
  @Nullable
  private final SegmentWithDescriptor segment;

  @Nullable
  private final ReadableFrameChannel inputChannel;

  @Nullable
  private final FrameReader frameReader;

  @Nullable
  private final StagePartition stagePartition;

  private ReadableInput(
      @Nullable SegmentWithDescriptor segment,
      @Nullable ReadableFrameChannel channel,
      @Nullable FrameReader frameReader,
      @Nullable StagePartition stagePartition
  )
  {
    this.segment = segment;
    this.inputChannel = channel;
    this.frameReader = frameReader;
    this.stagePartition = stagePartition;

    if ((segment == null) == (channel == null)) {
      throw new ISE("Provide either 'segment' or 'channel'");
    }
  }

  public static ReadableInput segment(final SegmentWithDescriptor segment)
  {
    return new ReadableInput(segment, null, null, null);
  }

  public static ReadableInput channel(
      final ReadableFrameChannel inputChannel,
      final FrameReader frameReader,
      final StagePartition stagePartition
  )
  {
    return new ReadableInput(null, inputChannel, frameReader, stagePartition);
  }

  public boolean hasSegment()
  {
    return segment != null;
  }

  public boolean hasChannel()
  {
    return inputChannel != null;
  }

  public SegmentWithDescriptor getSegment()
  {
    return Preconditions.checkNotNull(segment, "segment");
  }

  public ReadableFrameChannel getChannel()
  {
    return Preconditions.checkNotNull(inputChannel, "channel");
  }

  public FrameReader getChannelFrameReader()
  {
    return Preconditions.checkNotNull(frameReader, "frameReader");
  }

  @Nullable
  public StagePartition getStagePartition()
  {
    return stagePartition;
  }
}
