// def loadEnvironment() {
//     environment {
//         MVN_SETTINGS_PATH = credentials('maven-artifactory-settings')
//     }
// }

def mavenInstall() {
    script {
        withCredentials([file(credentialsId: 'maven-artifactory-settings', variable: 'MVN_SETTINGS_PATH')]) {
            sh script: '''
                mkdir -p ~/.m2
                ln -sf $MVN_SETTINGS_PATH ~/.m2/settings.xml
                ${MVN} clean install -q -ff ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS} -T 1C
            ''',
            label: 'mvn install'
        }
    }
}

def prepareIfconfig() {
    sh script: '''
        echo -e '#!/bin/bash\nPATH=/sbin:$PATH exec ifconfig eth0 $@' > /usr/bin/ifconfig
        chmod +x /usr/bin/ifconfig
        hash -r
    ''', label: "prepare ifconfig"
}

def imageJDK8() {
    return 'docker/druid-ci-jdk8:latest'
}

def rtRegistryUrl() {
    return 'https://repo.qa.imply.io/artifactory'
}

def rtRegistryCredentialsId() {
    return 'repo.qa.imply.io'
}

def dockerAgentArgs() {
    return '-u root:root --runtime=sysbox-runc -e DOCKER_REGISTRY_MIRROR=https://registry-mirror.qa.imply.io:443'
}

def dockerAgentLabel() {
    return 'jenkinsOnDemand'
}

def copyFilesByPattern(filesPattern, destDir) {
    sh script: """#!/bin/bash -x
        shopt -s globstar
        if  ls ${filesPattern}; then
            for fname in ${filesPattern}; do
                fname_root=\$(echo \${fname} | cut -d "/" -f1)
                if ! [[ "\$fname_root" = "${destDir}" ]]; then
                    mkdir -p \$(dirname -- "${destDir}/\${fname}")
                    cp \$fname ${destDir}/\${fname}
                fi
            done
        fi
    """
}

def buildArtifacts(stageName) {
    script {
        def stageArtifactsDirPath = "stage_${stageName.replaceAll(~/[^A-Za-z0-9_-]/,'_')}"
        sh script: "mkdir -p ${stageArtifactsDirPath}"
        // copy logs
        sh script: """#!/bin/bash -x
            [ -d ~/shared/logs ] && cp -R ~/shared/logs ${stageArtifactsDirPath}/ || true
            [ -d ~/shared/tasklogs ] && cp -R ~/shared/tasklogs ${stageArtifactsDirPath}/ || true
        """
        // copy test reports
        copyFilesByPattern("**/target/surefire-reports/*.xml", stageArtifactsDirPath)
        copyFilesByPattern("**/target/failsafe-reports/*.xml", stageArtifactsDirPath)
        // copy top-level jacoco reports
        copyFilesByPattern("**/target/*.exec", stageArtifactsDirPath)
        copyFilesByPattern("**/jacoco/*.html", stageArtifactsDirPath)
        copyFilesByPattern("**/jacoco/*.xml", stageArtifactsDirPath)
        copyFilesByPattern("**/jacoco/*.csv", stageArtifactsDirPath)
        copyFilesByPattern("**/jacoco/jacoco-resources/*", stageArtifactsDirPath)
        // copy detailed jacoco reports
        copyFilesByPattern("**/jacoco/**/*.html", stageArtifactsDirPath)
        copyFilesByPattern("**/jacoco/**/*.xml", stageArtifactsDirPath)
        copyFilesByPattern("**/jacoco/**/*.csv", stageArtifactsDirPath)
        // fixate artifacts
        archiveArtifacts artifacts: "${stageArtifactsDirPath}/**", allowEmptyArchive: true
    }
}

def resetWs() {
    sh script: "git clean -fdx", label: "Clean up everything but files from git"
}

def implyQueryIntegrationTests(jdkRuntimeArg) {
    mavenInstall()
    prepareIfconfig()
    sh script: """
        \${MVN} verify -Pintegration-tests-imply -pl integration-tests-imply \
        -Dgroups=query -Dit.indexer=middleManager  ${jdkRuntimeArg}  -Ddruid.test.config.extraDatasourceNameSuffix="" \
        -ff \${MAVEN_SKIP} -Djacoco.skip=true
    """,
    label: "imply query integration tests with ${jdkRuntimeArg}"
}

def implyIngestServiceIntegrationTests(jdkRuntimeArg) {
    mavenInstall()
    prepareIfconfig()
    sh script: """
        \${MVN} verify -Pintegration-tests-imply -pl integration-tests-imply \
        -Dgroups=ingest-service -Dit.indexer=middleManager  ${jdkRuntimeArg} \
        -ff \${MAVEN_SKIP} -Djacoco.skip=true
    """, label: "imply ingest service integration tests with ${jdkRuntimeArg}"
}

pipeline {
    options {
        timeout(time: 2, unit: 'HOURS')
    }
    agent none
  // agent {
  //     docker {
  //         image 'docker/druid-ci-jdk8:latest'
  //         registryUrl 'https://repo.qa.imply.io/artifactory'
  //         registryCredentialsId 'repo.qa.imply.io'
  //         args '-u root:root --runtime=sysbox-runc -e DOCKER_REGISTRY_MIRROR=https://registry-mirror.qa.imply.io:443'
  //         label 'jenkinsOnDemand'
  //     }
  // }

    environment {
        MVN = "mvn -B"
        MAVEN_SKIP = "-Danimal.sniffer.skip=true -Dcheckstyle.skip=true -Ddruid.console.skip=true -Denforcer.skip=true -Dforbiddenapis.skip=true -Dmaven.javadoc.skip=true -Dpmd.skip=true -Dspotbugs.skip=true"
        MAVEN_SKIP_TESTS = "-DskipTests -Djacoco.skip=true"
        MAVEN_OPTS = "-Xms4g -Xmx8g -XX:MaxDirectMemorySize=2048m"
        DOCKER_IP = "127.0.0.1"
        ZK_VERSION = "3.5"
    }

    stages {
    // stage('docker test') {
    //   steps {
    //     sh '''#!/bin/bash -x
    //         cat /etc/docker/daemon.json
    //         printenv
    //         docker run --rm -t alpine:latest ls -alt
    //         tail -n 200 /var/log/dockerd.log
    //     '''

    //     // script {
    //     //     input message: "Do you want to repackage"
    //     // }
    //   }
    // }
        stage('Checks') {
            parallel {
                // stage('security vulnerabilities') {
                //     // agent {
                //     //     docker {
                //     //         image 'maven:3.6.3-jdk-8'
                //     //         args '--memory=8g --memory-reservation=4g -u root:root'
                //     //         label 'jenkinsOnDemandMultiExec'
                //     //     }
                //     // }
                //     agent { docker { image imageJDK8(); args '--memory=8g --memory-reservation=4g -u root:root'; label 'jenkinsOnDemandMultiExec'} }
                //     steps {
                //         mavenInstall()
                //         sh script: '''#!/bin/bash
                //             set -o pipefail

                //             ${MVN} dependency-check:check || \
                //             { echo "The OWASP dependency check has found security vulnerabilities. Please use a newer version
                //             of the dependency that does not have vulnerabilities. If the analysis has false positives,
                //             they can be suppressed by adding entries to owasp-dependency-check-suppressions.xml (for more
                //             information, see https://jeremylong.github.io/DependencyCheck/general/suppression.html).
                //             " && false; }
                //         ''',
                //         label: 'dependency check'
                //     }
                //     // post {
                //     //     always {
                //     //         junit "**/TEST-*.xml"
                //     //     }
                //     // }
                // }

                stage('(Compile=openjdk8, Run=openjdk8) imply query integration tests') {
                    agent {docker {image imageJDK8();args dockerAgentArgs();registryUrl rtRegistryUrl();registryCredentialsId rtRegistryCredentialsId();label dockerAgentLabel()}}
                    steps { implyQueryIntegrationTests('-Djvm.runtime=8') }
                    post { always { buildArtifacts(env.STAGE_NAME) }; cleanup { resetWs() } }
                }

                stage('(Compile=openjdk8, Run=openjdk8) imply ingest service integration tests') {
                    agent {docker {image imageJDK8();args dockerAgentArgs();registryUrl rtRegistryUrl();registryCredentialsId rtRegistryCredentialsId();label dockerAgentLabel()}}
                    steps { implyIngestServiceIntegrationTests('-Djvm.runtime=8') }
                    post { always { buildArtifacts(env.STAGE_NAME) }; cleanup { resetWs() } }
                }


                // stage('(Compile=openjdk8, Run=openjdk11) imply query integration tests') {
                //     agent {docker {image imageJDK8();args dockerAgentArgs();registryUrl rtRegistryUrl();registryCredentialsId rtRegistryCredentialsId();label dockerAgentLabel()}}
                //     steps { implyQueryIntegrationTests('-Djvm.runtime=11') }
                //     post { always { buildArtifacts(env.STAGE_NAME) }; cleanup { resetWs() } }
                // }

                // stage('(Compile=openjdk8, Run=openjdk11) imply ingest service integration tests') {
                //     agent {docker {image imageJDK8();args dockerAgentArgs();registryUrl rtRegistryUrl();registryCredentialsId rtRegistryCredentialsId();label dockerAgentLabel()}}
                //     steps { implyIngestServiceIntegrationTests('-Djvm.runtime=11') }
                //     post { always { buildArtifacts(env.STAGE_NAME) }; cleanup { resetWs() } }
                // }

            }
        }
    }
}