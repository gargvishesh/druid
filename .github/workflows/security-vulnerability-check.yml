name: Vulnerability check for Imply Druid

on:
  # Run at 11 PM every day.
  schedule:
    - cron: "0 23 * * *"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

environment:
  MVN = "mvn -B"
  MAVEN_SKIP = "-Pskip-static-checks -Ddruid.console.skip=true -Dmaven.javadoc.skip=true"
  MAVEN_SKIP_TESTS = "-Pskip-tests"

jobs:
  dependencyVulnerabilities:
    runs-on: imply-ubuntu-latest
    strategy:
      # NIST can get overwhelmed with requests, so run checks one at a time
      max-parallel: 1
      fail-fast: false
      matrix:
        branch:
          - release/2023.01.0-LTS  # The LTS branch
          - master
    steps:
      - uses: actions/checkout@v2
        with:
          repository: implydata/druid
          ref: ${{ matrix.branch }}
          fetch-depth: 0
          token: ${{ secrets.PAT_FOR_GITHUB_ACTION}}

      - name: Getting suppressions file from master branch for LTS
        if: ${{ startsWith(matrix.branch == 'release/') && endsWith(matrix.branch == 'LTS') }}
        run: |
          echo "${{ matrix.branch }}"
          git fetch origin master:master
          git checkout origin/master -- owasp-dependency-check-suppressions.xml

      # We need to run mvn install to cache the dependencies so mvn can find
      # them in the next step.
      # This is copied from jenkinsfile.
      - name: mvn install
        run: |
          ${MVN} clean install -q -ff -pl ' !distribution ' ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS} -T1C
          ${MVN} install -q -ff -pl 'distribution' ${MAVEN_SKIP} ${MAVEN_SKIP_TESTS}

      - name: Run dependency check
        id: dep-check
        run: |
          set -o pipefail

          dependency_check() {
              touch /tmp/component-reports-failed
              ${MVN} dependency-check:aggregate -pl '!integration-tests,!integration-tests-imply,!api-contract' 2>&1 | tee /tmp/svc-output
              grep -F 'Failed to request component-reports' /tmp/svc-output >> /tmp/component-reports-failed
              grep -q "BUILD SUCCESS" /tmp/svc-output
          }

          DEPENDENCY_CHECK_STATUS=0

          if dependency_check; then
              echo "Dependency check succeeded"
          elif [[ $(cat /tmp/component-reports-failed) ]]; then
              echo "Dependency check failed due to component-reports issue"
          else
              echo "Dependency check failed not from component-reports issue. Failing"
              DEPENDENCY_CHECK_STATUS=1
          fi

          if [[ ${DEPENDENCY_CHECK_STATUS} eq 0 ]]; then 
              exit 1
          else
              echo "ERROR_OUTPUT=$(cat /tmp/svc-output | grep ERROR)" >> $GITHUB_OUTPUT
              
          rm -f /tmp/svc-output
          rm -f /tmp/component-reports-failed
        shell: bash

      - name: Slack Notification for job failed
        if: ${{ failure() && steps.dep-check.outcome != "success" }}
        uses: rtCamp/action-slack-notify@v2.1.0
        env:
          SLACK_USERNAME: "barista bob"
          SLACK_ICON_EMOJI: ":barista:"
          SLACK_MESSAGE: "There is a vulnerability in the branch ${{ matrix.branch }} \n ``${ env.ERROR_OUTPUT }```"
          SLACK_TITLE: "[FAILED] Found vulnerability in dependencies for ${{ matrix.branch }}"
          SLACK_COLOR: "danger"
          SLACK_CHANNEL: testing-slack
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}